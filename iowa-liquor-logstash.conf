input
	{
	#read the csv file
	#also use the multiline codec, everything that does not start with S or INV- is part of the prior line due to addresses having line breaks
	file {
		start_position => "beginning"
		path => "/srv/fda/iowa-liquor-jun-1-2018-limited.csv"
		codec => multiline {
			pattern => "^(S|INV-)[0-9][0-9]"
			negate => "true"
			what => "previous"
			}
	}
}

filter {
	#strip the dollar signs from the sale amounts
	#mutate { gsub => [ "message", "\$", "" ] }

	#parse the csv values
	#also, some things are integers and some are floats
	csv {
		columns => ["InvoiceItemNumber","Date","StoreNumber","StoreName","Address","City","ZipCode","StoreLocation","CountyNumber","County","Category","CategoryName","VendorNumber","VendorName","ItemNumber","ItemDescription","Pack","BottleVolumeml","StateBottleCost","StateBottleRetail","BottlesSold","SaleDollars","VolumeSoldLiters","VolumeSoldGallons"]
		convert => { "StoreNumber" => "integer" "ItemNumber" => "integer" "Category" => "integer" "CountyNumber" => "integer" "VendorNumber" => "integer" "Pack" => "integer" "SaleDollars" => "float" "StateBottleCost" => "float" "StateBottleRetail" => "float" "BottleVolumeml" => "float" "BottlesSold" => "float" "VolumeSoldLiters" => "float" "VolumeSoldGallons" => "float"}
		remove_field => ["message"]
	}

	#take the linebreaks out of the location and convert to spaces
	#lowercase the city and county as they change in the source file
	mutate {
		gsub => [ "StoreLocation", "\n", " " ]
		lowercase => [ "County", "City" ]
		}

	#get the lat/lon if there is a (numbers,numbers) data in the location
	grok { match => { "StoreLocation" => "\((?<location>[-,.0-9 ]*)\)" } }

	#Match the date to just daily and the correct timezone
	date {
		"target" => "DateofSale"
		"match" => [ "Date", "MM/dd/YYYY" ]
		"timezone" => "America/Chicago"
	}
}

output {
	elasticsearch {
		hosts => ["YOURCLUSTER_URI]
		index => ["iowa-liquor"]
		document_type => "_doc"
		user => "elastic"
		password => "YOURPASSWORD"
		manage_template => false
	}

	stdout { codec => "dots" }
	if "_dateparsefailure" in [tags] {
		stdout { codec => "rubydebug" }
	}
}
